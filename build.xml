<!--

Ant build.xml for Zserio C++ Extension.

Zserio C++ Extension is implemented as Java service which can be dynamically loaded by Zserio core during
runtime. It generates C++ API.

The following external properties can be set:

zserio_extensions.build_dir   - Zserio extensions build directory.
                                Default is "../../../build/compiler/extensions".
zserio_extensions.install_dir - Zserio extensions install directory.
                                Default is "../../../distr/zserio_libs".
zserio_cpp.build_dir          - Directory where to put generated files.
                                Default is "${zserio_extensions.build_dir}/cpp/${ant.java.version}".
zserio_cpp.install_dir        - Directory where to install Zserio C++ Extension jar file.
                                Default is "${zserio_extensions.install_dir}".
zserio_core.jar_file          - Zserio core jar file used for classpath.
                                Default is "${zserio_extensions.build_dir}/../core/${ant.java.version}/jar/
                                zserio_core.jar".
clang_format.exec_file        - Clang-format executable file. If not set, clang-format is not run.
spotbugs.home_dir             - Location of the spotbugs tool. If not set, spotbugs is not run.

-->
<project name="zserio_cpp" basedir="." default="jar">
    <dirname property="zserio_cpp.base_dir" file="${ant.file.zserio_cpp}"/>

    <property name="zserio_cpp.zserio_root" value="${zserio_cpp.base_dir}/../../.."/>

    <property name="zserio_extensions.build_dir" value="${zserio_cpp.zserio_root}/build/compiler/extensions"/>
    <property name="zserio_extensions.install_dir" value="${zserio_cpp.zserio_root}/distr/zserio_libs"/>
    <property name="zserio_cpp.build_dir" value="${zserio_extensions.build_dir}/cpp/${ant.java.version}"/>
    <property name="zserio_cpp.install_dir" value="${zserio_extensions.install_dir}"/>
    <property name="zserio_core.jar_file"
            value="${zserio_extensions.build_dir}/../core/${ant.java.version}/jar/zserio_core.jar"/>

    <property name="zserio_cpp.src_dir" value="${zserio_cpp.base_dir}/src"/>
    <property name="zserio_cpp.classes_dir" value="${zserio_cpp.build_dir}/classes"/>
    <property name="zserio_cpp.javadocs_dir" value="${zserio_cpp.build_dir}/javadocs"/>
    <property name="zserio_cpp.spotbugs.out_dir" value="${zserio_cpp.build_dir}/spotbugs"/>

    <property name="zserio_cpp.test.src_dir" location="${zserio_cpp.base_dir}/test"/>
    <property name="zserio_cpp.test.build_dir" value="${zserio_cpp.build_dir}/test"/>
    <property name="zserio_cpp.test.classes_dir" value="${zserio_cpp.test.build_dir}/classes"/>
    <property name="zserio_cpp.test.spotbugs.out_dir" value="${zserio_cpp.test.build_dir}/spotbugs"/>
    <property name="zserio_cpp.test.results_dir" value="${zserio_cpp.test.build_dir}/results"/>

    <property name="zserio_cpp.jar_dir" value="${zserio_cpp.build_dir}/jar"/>
    <property name="zserio_cpp.jar_file" value="${zserio_cpp.jar_dir}/zserio_cpp.jar"/>
    <property name="zserio_cpp.javadocs_jar_file" value="${zserio_cpp.jar_dir}/zserio_cpp_javadocs.jar"/>
    <property name="zserio_cpp.sources_jar_file" value="${zserio_cpp.jar_dir}/zserio_cpp_sources.jar"/>

    <property name="3rdparty.root_dir" value="${zserio_cpp.zserio_root}/3rdparty"/>
    <property name="3rdparty.jar_dir" value="${3rdparty.root_dir}/java"/>
    <property name="3rdparty.junit.jar_file"
        value="${3rdparty.jar_dir}/junit-platform-console-standalone-1.8.2.jar"/>

    <!-- Zserio C++ extension version. -->
    <loadfile
        encoding="UTF-8"
        property="zserio_cpp.version"
        srcFile="${basedir}/src/zserio/extension/cpp/CppExtensionVersion.java">
        <filterchain>
            <striplinebreaks/>
            <tokenfilter>
                <replaceregex
                    pattern='.*CPP_EXTENSION_VERSION_STRING\s*=\s*"([0-9]+.[0-9]+.[0-9]+(-[A-Za-z0-9]+)?)".*'
                    replace="\1"/>
            </tokenfilter>
        </filterchain>
    </loadfile>

    <uptodate property="zserio_cpp.javadocs_up_to_date">
        <srcfiles dir= "${zserio_cpp.src_dir}" includes="**/*"/>
        <srcfiles file="build.xml"/>
        <mapper type="merge" to="${zserio_cpp.javadocs_dir}/index.html"/>
    </uptodate>

    <target name="clean">
        <delete dir="${zserio_cpp.build_dir}"/>
    </target>

    <target name="compile">
        <mkdir dir="${zserio_cpp.classes_dir}"/>
        <depend srcDir="${zserio_cpp.src_dir}" destDir="${zserio_cpp.classes_dir}"
            cache="${zserio_cpp.build_dir}/depend-cache"/>

        <path id="zserio_cpp.classpath_zserio_core">
            <pathelement location="${zserio_core.jar_file}"/>
        </path>

        <javac srcdir="${zserio_cpp.src_dir}" destdir="${zserio_cpp.classes_dir}" debug="on"
            encoding="utf8" includeAntRuntime="false">
            <compilerarg value="-Xlint:all"/>
            <compilerarg value="-Werror"/>
            <classpath>
                <path refid="zserio_cpp.classpath_zserio_core"/>
            </classpath>
        </javac>
    </target>

    <target name="javadocs" unless="zserio_cpp.javadocs_up_to_date">
        <tstamp>
            <format property="timestamp" pattern="yyyy-MM-dd HH:mm:ss"/>
        </tstamp>
        <javadoc destdir="${zserio_cpp.javadocs_dir}" failonerror="true" failonwarning="true">
            <arg value="-Xdoclint:-missing"/>
            <fileset dir="${zserio_cpp.src_dir}"/>
            <doctitle>
                <![CDATA[<h1>Zserio C++ Extension Documentation</h1><h2>Version ${zserio_cpp.version}</h2]]>
            </doctitle>
            <bottom>
                <![CDATA[<i>Last updated ${timestamp}</i>]]>
            </bottom>
            <classpath>
                <path refid="zserio_cpp.classpath_zserio_core"/>
            </classpath>
        </javadoc>
    </target>

    <target name="jar" depends="compile, javadocs">
        <mkdir dir="${zserio_cpp.jar_dir}"/>
        <copy todir="${zserio_cpp.build_dir}/metainf" overwrite="true">
            <fileset dir="${zserio_cpp.base_dir}/metainf"/>
        </copy>

        <jar destfile="${zserio_cpp.jar_file}">
            <fileset dir="${zserio_cpp.classes_dir}">
                <include name="zserio/**"/>
            </fileset>
            <zipfileset dir="${zserio_cpp.base_dir}/freemarker" includes="*.ftl"
                prefix="freemarker/cpp"/>
            <manifest>
                <attribute name="Implementation-Version" value="${zserio_cpp.version}"/>
            </manifest>
            <metainf dir="${zserio_cpp.build_dir}/metainf" includes="**/*"/>
        </jar>

        <jar destfile="${zserio_cpp.javadocs_jar_file}">
            <fileset dir="${zserio_cpp.javadocs_dir}">
                <include name="**"/>
            </fileset>
            <manifest>
                <attribute name="Implementation-Version" value="${zserio_cpp.version}"/>
            </manifest>
        </jar>

        <jar destfile="${zserio_cpp.sources_jar_file}">
            <fileset dir="${zserio_cpp.src_dir}"/>
            <manifest>
                <attribute name="Implementation-Version" value="${zserio_cpp.version}"/>
            </manifest>
        </jar>
    </target>

    <target name="install" depends="jar">
        <mkdir dir="${zserio_cpp.install_dir}"/>
        <copy todir="${zserio_cpp.install_dir}" overwrite="true">
            <fileset dir="${zserio_cpp.jar_dir}">
                <include name="*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="clang_format" depends="install" if="clang_format.exec_file">
        <echo>
Command hints to reformat source manually using clang-format tool (in case of format errors):
    git clang-format
    clang-format --style=file -i [SOURCE]
        </echo>
        <apply executable="${clang_format.exec_file}" failonerror="true">
            <arg value="--style=file"/>
            <arg value="--dry-run"/>
            <arg value="--Werror"/>
            <srcfile/>
            <fileset dir="${zserio_cpp.src_dir}" includes="**/*.java"/>
        </apply>
    </target>

    <target name="spotbugs" depends="clang_format" if="spotbugs.home_dir">
        <mkdir dir="${zserio_cpp.spotbugs.out_dir}"/>
        <taskdef classpath="${spotbugs.home_dir}/lib/spotbugs-ant.jar"
            resource="edu/umd/cs/findbugs/anttask/tasks.properties"/>
        <spotbugs home="${spotbugs.home_dir}"
            output="html"
            outputFile="${zserio_cpp.spotbugs.out_dir}/spotbugs.html"
            excludeFilter="${zserio_cpp.base_dir}/spotbugs_filter.xml"
            reportLevel="low"
            errorProperty="zserio_cpp.is_failed"
            warningsProperty="zserio_cpp.is_failed">
            <sourcePath>
                <dirset dir="${zserio_cpp.src_dir}"/>
            </sourcePath>
            <fileset dir="${zserio_cpp.classes_dir}"/>
            <auxClasspath>
                <path refid="zserio_cpp.classpath_zserio_core"/>
            </auxClasspath>
        </spotbugs>
        <fail message="SpotBugs found some issues!" if="zserio_cpp.is_failed"/>
    </target>

    <target name="test.clean">
        <delete dir="${zserio_cpp.test.build_dir}"/>
    </target>

    <target name="test.compile" depends="jar">
        <mkdir dir="${zserio_cpp.test.classes_dir}"/>
        <depend srcDir="${zserio_cpp.test.src_dir}" destDir="${zserio_cpp.test.classes_dir}"
            cache="${zserio_cpp.test.build_dir}/depend-cache"/>
        <javac srcdir="${zserio_cpp.test.src_dir}" destdir="${zserio_cpp.test.classes_dir}" debug="on"
            encoding="utf8" includeAntRuntime="false">
            <compilerarg value="-Xlint:all"/>
            <compilerarg value="-Werror"/>
            <classpath>
                <pathelement path="${3rdparty.junit.jar_file}"/>
                <pathelement path="${zserio_cpp.jar_file}"/>
                <pathelement path="${zserio_core.jar_file}"/>
            </classpath>
        </javac>
    </target>

    <target name="test.clang_format" depends="spotbugs, test.compile" if="clang_format.exec_file">
        <echo>
Command hints to reformat source manually using clang-format tool (in case of format errors):
    git clang-format
    clang-format --style=file -i [SOURCE]
        </echo>
        <apply executable="${clang_format.exec_file}" failonerror="true">
            <arg value="--style=file"/>
            <arg value="--dry-run"/>
            <arg value="--Werror"/>
            <srcfile/>
            <fileset dir="${zserio_cpp.test.src_dir}" includes="**/*.java"/>
        </apply>
    </target>

    <target name="test.spotbugs" depends="test.clang_format" if="spotbugs.home_dir">
        <mkdir dir="${zserio_cpp.test.spotbugs.out_dir}"/>
        <taskdef classpath="${spotbugs.home_dir}/lib/spotbugs-ant.jar"
            resource="edu/umd/cs/findbugs/anttask/tasks.properties"/>
        <spotbugs home="${spotbugs.home_dir}"
            output="html"
            outputFile="${zserio_cpp.test.spotbugs.out_dir}/spotbugs.html"
            excludeFilter="${zserio_cpp.base_dir}/spotbugs_filter.xml"
            reportLevel="low"
            errorProperty="zserio_cpp.spotbugs.is_failed"
            warningsProperty="zserio_cpp.spotbugs.is_failed">
            <sourcePath>
                <dirset dir="${zserio_cpp.test.src_dir}"/>
            </sourcePath>
            <fileset dir="${zserio_cpp.test.classes_dir}"/>
            <class location="${zserio_cpp.jar_file}"/>
            <auxClasspath>
                <path refid="zserio_cpp.classpath_zserio_core"/>
                <fileset file="${3rdparty.junit.jar_file}"/>
                <fileset file="${zserio_core.jar_file}"/>
            </auxClasspath>
        </spotbugs>
        <fail message="SpotBugs found some issues!" if="zserio_cpp.spotbugs.is_failed"/>
    </target>

    <target name="test.run" depends="test.spotbugs">
        <mkdir dir="${zserio_cpp.test.results_dir}"/>
        <java classname="org.junit.platform.console.ConsoleLauncher" fork="true" failonerror="true"
                dir="${zserio_cpp.test.build_dir}">
            <classpath>
                <pathelement path="${3rdparty.junit.jar_file}"/>
                <pathelement path="${zserio_cpp.jar_file}"/>
                <pathelement path="${zserio_core.jar_file}"/>
                <pathelement path="${zserio_cpp.test.classes_dir}"/>
            </classpath>
            <arg line="--disable-banner"/>
            <arg line="--scan-classpath"/>
            <arg line="--fail-if-no-tests"/>
            <arg line="--details tree"/>
            <arg line="--exclude-engine junit-vintage"/>
            <arg line="--reports-dir ${zserio_cpp.test.results_dir}"/>
        </java>
    </target>

    <target name="test" depends="test.run">
    </target>
</project>
