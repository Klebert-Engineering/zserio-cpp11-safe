/**
 * Automatically generated by Zserio C++11 Safe generator version 1.2.1 using Zserio core 2.16.1.
 * Generator setup: writerCode, settersCode, pubsubCode, serviceCode, sqlCode, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <minizs/Inner.h>

namespace minizs
{

Inner::Inner(const allocator_type& allocator) noexcept :
        m_key_(allocator),
        m_value_(uint8_t())
{
}

Inner::Inner(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_key_(readKey(in, allocator)),
        m_value_(readValue(in))
{
}

Inner::Inner(::zserio::PropagateAllocatorT,
        const Inner& other, const allocator_type& allocator) :
        m_key_(::zserio::allocatorPropagatingCopy(other.m_key_, allocator)),
        m_value_(::zserio::allocatorPropagatingCopy(other.m_value_, allocator))
{
}

::zserio::string<>& Inner::getKey()
{
    return m_key_;
}

const ::zserio::string<>& Inner::getKey() const
{
    return m_key_;
}

void Inner::setKey(const ::zserio::string<>& key_)
{
    m_key_ = key_;
}

void Inner::setKey(::zserio::string<>&& key_)
{
    m_key_ = ::std::move(key_);
}

uint8_t Inner::getValue() const
{
    return m_value_;
}

void Inner::setValue(uint8_t value_)
{
    m_value_ = value_;
}

size_t Inner::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfString(m_key_);
    endBitPosition += UINT8_C(8);

    return endBitPosition - bitPosition;
}

size_t Inner::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfString(m_key_);
    endBitPosition += UINT8_C(8);

    return endBitPosition;
}

bool Inner::operator==(const Inner& other) const
{
    if (this != &other)
    {
        return
                (m_key_ == other.m_key_) &&
                (m_value_ == other.m_value_);
    }

    return true;
}

bool Inner::operator<(const Inner& other) const
{
    if (m_key_ < other.m_key_)
    {
        return true;
    }
    if (other.m_key_ < m_key_)
    {
        return false;
    }

    if (m_value_ < other.m_value_)
    {
        return true;
    }
    if (other.m_value_ < m_value_)
    {
        return false;
    }

    return false;
}

uint32_t Inner::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_key_);
    result = ::zserio::calcHashCode(result, m_value_);

    return result;
}

void Inner::write(::zserio::BitStreamWriter& out) const
{
    out.writeString(m_key_);
    out.writeBits(m_value_, UINT8_C(8));
}

::zserio::string<> Inner::readKey(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return static_cast<::zserio::string<>>(in.readString(allocator));
}

uint8_t Inner::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<uint8_t>(in.readBits(UINT8_C(8)));
}


} // namespace minizs
