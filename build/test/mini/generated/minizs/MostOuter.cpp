/**
 * Automatically generated by Zserio C++11 Safe generator version 1.2.1 using Zserio core 2.16.1.
 * Generator setup: writerCode, settersCode, pubsubCode, serviceCode, sqlCode, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <minizs/MostOuter.h>

namespace minizs
{

MostOuter::MostOuter(const allocator_type& allocator) noexcept :
        m_areChildrenInitialized(false),
        m_numOfInner_(uint8_t()),
        m_outer_(allocator)
{
}

MostOuter::MostOuter(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_numOfInner_(readNumOfInner(in)),
        m_outer_(readOuter(in, allocator))
{
}

MostOuter::MostOuter(const MostOuter& other) :
        m_numOfInner_(other.m_numOfInner_),
        m_outer_(::zserio::NoInit, other.m_outer_)
{
    if (other.m_areChildrenInitialized)
    {
        initializeChildren();
    }
    else
    {
        m_areChildrenInitialized = false;
    }
}

MostOuter& MostOuter::operator=(const MostOuter& other)
{
    m_numOfInner_ = other.m_numOfInner_;
    (void)m_outer_.assign(::zserio::NoInit, other.m_outer_);
    if (other.m_areChildrenInitialized)
    {
        initializeChildren();
    }
    else
    {
        m_areChildrenInitialized = false;
    }

    return *this;
}

MostOuter::MostOuter(MostOuter&& other) :
        m_numOfInner_(::std::move(other.m_numOfInner_)),
        m_outer_(::zserio::NoInit, ::std::move(other.m_outer_))
{
    if (other.m_areChildrenInitialized)
    {
        initializeChildren();
    }
    else
    {
        m_areChildrenInitialized = false;
    }
}

MostOuter& MostOuter::operator=(MostOuter&& other)
{
    m_numOfInner_ = ::std::move(other.m_numOfInner_);
    (void)m_outer_.assign(::zserio::NoInit, ::std::move(other.m_outer_));
    if (other.m_areChildrenInitialized)
    {
        initializeChildren();
    }
    else
    {
        m_areChildrenInitialized = false;
    }

    return *this;
}

MostOuter::MostOuter(::zserio::PropagateAllocatorT,
        const MostOuter& other, const allocator_type& allocator) :
        m_numOfInner_(::zserio::allocatorPropagatingCopy(other.m_numOfInner_, allocator)),
        m_outer_(::zserio::NoInit, ::zserio::allocatorPropagatingCopy(::zserio::NoInit, other.m_outer_, allocator))
{
    if (other.m_areChildrenInitialized)
    {
        initializeChildren();
    }
    else
    {
        m_areChildrenInitialized = false;
    }
}

void MostOuter::initializeChildren()
{
    m_outer_.initialize(static_cast<uint8_t>(getNumOfInner()));

    m_areChildrenInitialized = true;
}

uint8_t MostOuter::getNumOfInner() const
{
    return m_numOfInner_;
}

void MostOuter::setNumOfInner(uint8_t numOfInner_)
{
    m_numOfInner_ = numOfInner_;
}

::minizs::Outer& MostOuter::getOuter()
{
    return m_outer_;
}

const ::minizs::Outer& MostOuter::getOuter() const
{
    return m_outer_;
}

void MostOuter::setOuter(const ::minizs::Outer& outer_)
{
    m_outer_ = outer_;
}

void MostOuter::setOuter(::minizs::Outer&& outer_)
{
    m_outer_ = ::std::move(outer_);
}

size_t MostOuter::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(8);
    endBitPosition += m_outer_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t MostOuter::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(8);
    endBitPosition = m_outer_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

bool MostOuter::operator==(const MostOuter& other) const
{
    if (this != &other)
    {
        return
                (m_numOfInner_ == other.m_numOfInner_) &&
                (m_outer_ == other.m_outer_);
    }

    return true;
}

bool MostOuter::operator<(const MostOuter& other) const
{
    if (m_numOfInner_ < other.m_numOfInner_)
    {
        return true;
    }
    if (other.m_numOfInner_ < m_numOfInner_)
    {
        return false;
    }

    if (m_outer_ < other.m_outer_)
    {
        return true;
    }
    if (other.m_outer_ < m_outer_)
    {
        return false;
    }

    return false;
}

uint32_t MostOuter::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_numOfInner_);
    result = ::zserio::calcHashCode(result, m_outer_);

    return result;
}

void MostOuter::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_numOfInner_, UINT8_C(8));

    // check parameters
    if (m_outer_.getNumOfInners() != static_cast<uint8_t>(getNumOfInner()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter numOfInners for field MostOuter.outer: ") <<
                m_outer_.getNumOfInners() << " != " << static_cast<uint8_t>(getNumOfInner()) << "!";
    }
    m_outer_.write(out);
}

uint8_t MostOuter::readNumOfInner(::zserio::BitStreamReader& in)
{
    return static_cast<uint8_t>(in.readBits(UINT8_C(8)));
}

::minizs::Outer MostOuter::readOuter(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::minizs::Outer(in, static_cast<uint8_t>(getNumOfInner()), allocator);
}


} // namespace minizs
