/**
 * Automatically generated by Zserio C++11 Safe generator version 1.2.1 using Zserio core 2.16.1.
 * Generator setup: writerCode, settersCode, pubsubCode, serviceCode, sqlCode, polymorphicAllocator.
 */

#ifndef MINIZS_OUTER_H
#define MINIZS_OUTER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 1002001
    #error Version mismatch between Zserio runtime library and Zserio C++ generator!
    #error Please update your Zserio runtime library to the version 1.2.1.
#endif

#include <zserio/Traits.h>
#include <zserio/NoInit.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/pmr/PolymorphicAllocator.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/pmr/Vector.h>

#include <minizs/Inner.h>

namespace minizs
{

class Outer
{
public:
    using allocator_type = ::zserio::pmr::PropagatingPolymorphicAllocator<>;

    Outer() noexcept :
            Outer(allocator_type())
    {}

    explicit Outer(const allocator_type& allocator) noexcept;
    
    static ::zserio::Result<Outer> create(::zserio::BitStreamReader& in, uint8_t numOfInners_, const allocator_type& allocator = allocator_type());

    template <typename ZSERIO_T_inner = ::zserio::pmr::vector<::minizs::Inner>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_inner, Outer, allocator_type> = 0>
    explicit Outer(
            ZSERIO_T_inner&& inner_,
            const allocator_type& allocator = allocator_type()) :
            Outer(allocator)
    {
        m_inner_ = ZserioArrayType_inner(::std::forward<ZSERIO_T_inner>(inner_));
    }

    explicit Outer(::zserio::BitStreamReader& in,
            uint8_t numOfInners_, const allocator_type& allocator = allocator_type());

    ~Outer() = default;

    Outer(const Outer& other);
    Outer& operator=(const Outer& other);

    Outer(Outer&& other);
    Outer& operator=(Outer&& other);

    Outer(::zserio::NoInitT,
            const Outer& other);
    Outer& assign(::zserio::NoInitT, const Outer& other);

    Outer(::zserio::NoInitT, Outer&& other);
    Outer& assign(::zserio::NoInitT,
            Outer&& other);

    Outer(::zserio::PropagateAllocatorT,
            const Outer& other, const allocator_type& allocator);
    Outer(::zserio::PropagateAllocatorT, ::zserio::NoInitT,
            const Outer& other, const allocator_type& allocator);

    void initialize(
            uint8_t numOfInners_);
    bool isInitialized() const;

    uint8_t getNumOfInners() const;

    const ::zserio::pmr::vector<::minizs::Inner>& getInner() const;
    ::zserio::pmr::vector<::minizs::Inner>& getInner();
    void setInner(const ::zserio::pmr::vector<::minizs::Inner>& inner_);
    void setInner(::zserio::pmr::vector<::minizs::Inner>&& inner_);

    ::zserio::Result<size_t> bitSizeOf(size_t bitPosition = 0) const;

    ::zserio::Result<size_t> initializeOffsets(size_t bitPosition = 0);

    bool operator==(const Outer& other) const;

    bool operator<(const Outer& other) const;

    uint32_t hashCode() const;

    ::zserio::Result<void> write(::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_inner
    {
    public:
        using OwnerType = Outer;

        static ::zserio::Result<void> create(Outer& owner,
                ::zserio::pmr::vector<::minizs::Inner>& array,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_inner = ::zserio::Array<::zserio::pmr::vector<::minizs::Inner>, ::zserio::ObjectArrayTraits<::minizs::Inner, ZserioElementFactory_inner>, ::zserio::ArrayType::NORMAL>;

    ZserioArrayType_inner readInner(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    uint8_t m_numOfInners_;
    bool m_isInitialized;
    ZserioArrayType_inner m_inner_;
};

} // namespace minizs

#endif // MINIZS_OUTER_H
