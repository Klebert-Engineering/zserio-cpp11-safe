/**
 * Automatically generated by Zserio C++11 Safe generator version 1.2.1 using Zserio core 2.16.1.
 * Generator setup: writerCode, settersCode, pubsubCode, serviceCode, sqlCode, stdAllocator.
 */

#ifndef MINIZS_INNER_H
#define MINIZS_INNER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 1002001
    #error Version mismatch between Zserio runtime library and Zserio C++ generator!
    #error Please update your Zserio runtime library to the version 1.2.1.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/Types.h>

namespace minizs
{

class Inner
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    Inner() noexcept :
            Inner(allocator_type())
    {}

    explicit Inner(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_key = ::zserio::string<>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_key, Inner, allocator_type> = 0>
    Inner(
            ZSERIO_T_key&& key_,
            uint8_t value_,
            const allocator_type& allocator = allocator_type()) :
            Inner(allocator)
    {
        m_key_ = ::std::forward<ZSERIO_T_key>(key_);
        m_value_ = value_;
    }

    explicit Inner(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Inner() = default;

    Inner(const Inner&) = default;
    Inner& operator=(const Inner&) = default;

    Inner(Inner&&) = default;
    Inner& operator=(Inner&&) = default;

    Inner(::zserio::PropagateAllocatorT,
            const Inner& other, const allocator_type& allocator);

    const ::zserio::string<>& getKey() const;
    ::zserio::string<>& getKey();
    void setKey(const ::zserio::string<>& key_);
    void setKey(::zserio::string<>&& key_);

    uint8_t getValue() const;
    void setValue(uint8_t value_);

    size_t bitSizeOf(size_t bitPosition = 0) const;

    size_t initializeOffsets(size_t bitPosition = 0);

    bool operator==(const Inner& other) const;

    bool operator<(const Inner& other) const;

    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;

private:
    ::zserio::string<> readKey(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    uint8_t readValue(::zserio::BitStreamReader& in);

    ::zserio::string<> m_key_;
    uint8_t m_value_;
};

} // namespace minizs

#endif // MINIZS_INNER_H
